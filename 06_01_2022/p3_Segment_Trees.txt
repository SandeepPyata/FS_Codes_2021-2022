// Question Link : https://leetcode.com/problems/range-sum-query-mutable/

// Reference Code : https://cp-algorithms.com/data_structures/segment_tree.html#implementation




Java Code

/*
Malika taught a new fun time program practice for Engineering Students.
As a part of this she has given set of numbers, and asked the students 
to find the gross value of numbers between indices S1 and S2 (S1<=S2), inclusive.

Now itâ€™s your task to create a method sumRange(S1,S2)which return the sum of numbers 
between the indices S1 and S2, both are inclusive.


Input Format:
-------------
Line-1: An integer n, size of the array(set of numbers).
Line-2: n space separated integers.
Line-3: Two integers s1 and s2, index positions where s1<=s2.

Output Format:
--------------
An integer, sum of integers between indices(s1, s2).


Sample Input-1:
---------------
8
1 2 13 4 25 16 17 8 
2 6

Sample Output-1:
----------------
75

*/
import java.util.*;

// Segment Tree using Arrays
class NumArray {
    int[] tree;
    int n;

    public NumArray(int[] nums) {
        n = nums.length;
        tree = new int[n << 1];
        buildTree(nums);
    }

    private void buildTree(int[] nums) {
        for (int i = n; i < n << 1; i++) {
            tree[i] = nums[i - n];
        }

        for (int i = n - 1; i > 0; i--) {
            tree[i] = tree[i << 1] + tree[i << 1 | 1];
        }
    }

    void update(int i, int val) {
        for (tree[i += n] = val; i > 0; i >>= 1) {
            tree[i >> 1] = tree[i] + tree[i ^ 1];
        }
    }

    public int sumRange(int i, int j) {
        int ret = 0;
        for (i += n, j += n; i <= j; i >>= 1, j >>= 1) {
            if ((i & 1) == 1) ret += tree[i++];
            if ((j & 1) == 0) ret += tree[j--];
        }
        return ret;
    }    
	public static void main(String args[] ) {
		 Scanner scan = new Scanner(System.in);
			int n=scan.nextInt();
			int q=scan.nextInt();      
			int[] nums=new int[n];
		   for(int i=0; i<n; i++)
		   {
				 nums[i] = scan.nextInt();
		   }
		   NumArray na=new NumArray(nums);
		   // call sumrange(s1,s2)
			int s1 = scan.nextInt();
			int s2 = scan.nextInt();
			System.out.println(na.sumRange(s1,s2));
	}
}
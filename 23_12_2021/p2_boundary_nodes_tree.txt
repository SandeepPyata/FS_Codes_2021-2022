/*
Indian Army setup some military-camps, sitauted at random places at LAC in Galwan.
There exist a main base camp connected with other base camps as follows:
Each military-camp is connected with atmost two other military-camps.
Each military-camp will be identified with an unique ID,(an integer).

To safeguard all the military-camps, Govt of India planned to setup protective 
S.H.I.E.L.D. Govt of India ask your help to build the S.H.I.E.L.D that should 
enclose all the militar-camps.

You are given the IDs of the military-camps as binary tree. 
Your task is to find and return the military camp IDs, those are on the edge of 
the S.H.I.E.L.D in anti-clockwise order.

Implement the class Solution:
   1. public List<Integer> compoundWall(BinaryTreeNode root): returns a boolean value.
  

NOTE:
'-1' in the IDs indicates no military-camp (NULL).


Input Format:
-------------
space separated integers, military-camp IDs.

Output Format:
--------------
Print all the military-camp IDs, which are at the edge of S.H.I.E.L.D.


Sample Input-1:
---------------
5 2 4 7 9 8 1

Sample Output-1:
----------------
[5, 2, 7, 9, 8, 1, 4]


Sample Input-2:
---------------
11 2 13 4 25 6 -1 -1 -1 7 18 9 10

Sample Output-2:
----------------
[11, 2, 4, 7, 18, 9, 10, 6, 13]
*/
/*
//TreeNode Structure for Your Reference..

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

*/
import java.util.*;
import java.io.*;

class Solution {
    void printBoundaryLeft(BinaryTreeNode node, List<Integer> l)
    {
        if (node == null)
            return;

        if (node.left != null && node.left.data!=-1){
            l.add(node.data);
            printBoundaryLeft(node.left,l);
        }
        else if (node.right != null && node.right.data!=-1) {
            l.add(node.data);
            printBoundaryLeft(node.right,l);
        }
    }

    void printBoundaryRight(BinaryTreeNode node,List<Integer> l)
    {
        if (node == null)
            return;

        if (node.right != null && node.right.data!=-1) {
            printBoundaryRight(node.right,l);
            l.add(node.data);
        }
        else if (node.left != null && node.left.data!=-1) {
            printBoundaryRight(node.left,l);
            l.add(node.data);
        }
    }
    void printLeaves(BinaryTreeNode node, List<Integer> l)
    {
        if (node == null)
            return;
        printLeaves(node.left,l);
        if(node.left!=null && node.left.data==-1 && node.right!=null && node.right.data==-1){
            l.add(node.data);
        }
        else if(node.left == null && node.right == null && node.data!=-1){
            l.add(node.data);
        }
            
        printLeaves(node.right,l);
    }
    public List<Integer> compoundWall(BinaryTreeNode node){
        // Implement Your Code here..
        List<Integer> l = new ArrayList<Integer>();
        if(node == null)
            return l;
        
        l.add(node.data);
        printBoundaryLeft(node.left,l);
        printLeaves(node.left,l);
        printLeaves(node.right,l);
        printBoundaryRight(node.right,l);
        
        l.removeAll(Collections.singleton(-1));
        
        return l;
    }
}
